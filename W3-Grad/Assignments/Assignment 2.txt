Leetcode 1752. Check if Array Is Sorted and Rotated

Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.
There may be duplicates in the original array.
Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].


Answer Leetcode 1752: 
class Solution {
    public boolean check(int[] nums) {
        boolean firstFlag = false;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]<=nums[i+1]){
                continue;
            }else if (!firstFlag){
                firstFlag = true;
                if(nums[0]<nums[nums.length-1]){
                    return false;
                }
            }else{
                return false;
            }
        }
        return true;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Leetcode 414. Third Maximum Number

Given an integer array nums, return the third distinct maximum number in this array. 
If the third maximum does not exist, return the maximum number.

Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.


Answer Leetcode 414: 
class Solution {
    public int thirdMax(int[] nums) {
        long max=Long.MIN_VALUE,secondMax=Long.MIN_VALUE,thirdMax=Long.MIN_VALUE;
        for(int i:nums){
            if(i>max){
                thirdMax=secondMax;
                secondMax=max;
                max=i;
            }
            if(i>secondMax && i!=max){
                thirdMax=secondMax;
                secondMax=i;
            }
            if(i>thirdMax && i!=max && i!=secondMax){
                thirdMax=i;
            }
        }
        if(thirdMax==Long.MIN_VALUE){
            return (int)(max);
        }
        return (int)(thirdMax);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Leetcode 283. Move Zeroes

Given an integer array nums, move all 0's to the 
end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Answer Leetcode 283 :
class Solution {
    public void moveZeroes(int[] nums) {
        int[] arr = Arrays.copyOf(nums,nums.length);

        int j = 0;
        int count = 0;
        for(int i=0;i<nums.length;i++){
            if(arr[i] != 0){
                nums[j] = arr[i];
                j++;
            }
        }
        while(j<nums.length){
            nums[j] = 0;
            j++;
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------

GFG Rotate Array

Given an unsorted array arr[] of size n. 
Rotate the array to the left (counter-clockwise direction) 
by d steps, where d is a positive integer. 

Example
Input: n = 5, d = 2 arr[] = {1,2,3,4,5}
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2.

Answer GFG Rotate Array:

// User function Template for Java

class Solution {
    // Function to rotate an array by d elements in counter-clockwise direction.
    static void rotateArr(int arr[], int d, int n) {
        // add your code here
        d = d%n;
        reverse(arr,0,n-1);
        reverse(arr,0,n-d-1);
        reverse(arr,n-d,n-1);
        
    }
    static void reverse(int arr[],int i,int j){
        while(i<j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
}

